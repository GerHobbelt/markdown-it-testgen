{"version":3,"file":"markdownItTestgen.modern.js","sources":["../index.js"],"sourcesContent":["\nconst fs      = require('fs');\nconst p       = require('path');\n\nconst yaml    = require('js-yaml');\n\n\nfunction _class(obj) {\n  return Object.prototype.toString.call(obj);\n}\n\nfunction isString(obj)   {\n  return _class(obj) === '[object String]';\n}\nfunction isFunction(obj) {\n  return _class(obj) === '[object Function]';\n}\nfunction isArray(obj)    {\n  return _class(obj) === '[object Array]';\n}\n\n\nfunction fixLF(str) {\n  return str.length ? str + '\\n' : str;\n}\n\n\nfunction parse(input, options) {\n  const lines = input.split(/\\r?\\n/g);\n  const max = lines.length;\n  let min = 0;\n  let line = 0;\n  let fixture, i, l, currentSep, blockStart;\n\n  const result = {\n    fixtures: []\n  };\n\n  const sep = options.sep || [ '.' ];\n\n  // Try to parse meta\n  if (/^-{3,}$/.test(lines[0] || '')) {\n    line++;\n    while (line < max && !/^-{3,}$/.test(lines[line])) {\n      line++;\n    }\n\n    // If meta end found - extract range\n    if (line < max) {\n      result.meta = lines.slice(1, line).join('\\n');\n      line++;\n      min = line;\n    } else {\n      // if no meta closing - reset to start and try to parse data without meta\n      line = 1;\n    }\n  }\n\n  // Scan fixtures\n  while (line < max) {\n    if (sep.indexOf(lines[line]) < 0) {\n      line++;\n      continue;\n    }\n\n    currentSep = lines[line];\n\n    fixture = {\n      type: currentSep,\n      header: '',\n      first: {\n        text: '',\n        range: []\n      },\n      second: {\n        text: '',\n        range: []\n      }\n    };\n\n    line++;\n    blockStart = line;\n\n    // seek end of first block\n    while (line < max && lines[line] !== currentSep) {\n      line++;\n    }\n    if (line >= max) {\n      break;\n    }\n\n    fixture.first.text = fixLF(lines.slice(blockStart, line).join('\\n'));\n    fixture.first.range.push(blockStart, line);\n    line++;\n    blockStart = line;\n\n    // seek end of second block\n    while (line < max && lines[line] !== currentSep) {\n      line++;\n    }\n    if (line >= max) {\n      break;\n    }\n\n    fixture.second.text = fixLF(lines.slice(blockStart, line).join('\\n'));\n    fixture.second.range.push(blockStart, line);\n    line++;\n\n    // Look back for header on 2 lines before texture blocks\n    i = fixture.first.range[0] - 2;\n    while (i >= Math.max(min, fixture.first.range[0] - 3)) {\n      l = lines[i];\n      if (sep.indexOf(l) >= 0) {\n        break;\n      }\n      if (l.trim().length) {\n        fixture.header = l.trim();\n        break;\n      }\n      i--;\n    }\n\n    result.fixtures.push(fixture);\n  }\n\n  return (result.meta || result.fixtures.length) ? result : null;\n}\n\n\n// Read fixtures recursively, and run iterator on parsed content\n//\n// Options\n//\n// - sep (String|Array) - allowed fixture separator(s)\n//\n// Parsed data fields:\n//\n// - file (String): file name\n// - meta (Mixed):  metadata from header, if exists\n// - fixtures\n//\nfunction load(path, options, iterator) {\n  let input, parsed,\n      stat = fs.statSync(path);\n\n  if (isFunction(options)) {\n    iterator = options;\n    options = { sep: [ '.' ] };\n  } else if (isString(options)) {\n    options = { sep: options.split('') };\n  } else if (isArray(options)) {\n    options = { sep: options };\n  }\n\n  if (stat.isFile()) {\n    input = fs.readFileSync(path, 'utf8');\n\n    parsed = parse(input, options);\n\n    if (!parsed) {\n      return null;\n    }\n\n    parsed.file = path;\n    try {\n      const src = parsed.meta || '';\n      if (src.trim() === '') {\n        parsed.meta = null;\n      } else {\n        parsed.meta = yaml.load(src);\n      }\n    } catch (ex) {\n      console.error('markdon-it-testgen: META parse error:', ex);\n      parsed.meta = null;\n    }\n\n    if (iterator) {\n      iterator(parsed);\n    }\n    return parsed;\n  }\n\n  let result, res;\n  if (stat.isDirectory()) {\n    result = [];\n\n    fs.readdirSync(path).forEach(function (name) {\n      res = load(p.join(path, name), options, iterator);\n      if (Array.isArray(res)) {\n        result = result.concat(res);\n      } else if (res) {\n        result.push(res);\n      }\n    });\n\n    return result;\n  }\n\n  // Silently ignore other entries (symlinks and so on)\n  return null;\n}\n\nfunction generate(path, options, md, env) {\n  if (!md && options.render) {\n    md = options;\n    options = {};\n  }\n\n  env = env || {};\n\n  options = Object.assign({}, options);\n  options.assert = options.assert || require('assert');\n\n  load(path, options, function (data) {\n    data.meta = Object.assign({}, data.meta);\n\n    // options.desc wins over metadata, which itself wins over the path-based description generator calls in here:\n    const desc = '' + (options.desc || data.meta.desc || p.relative(path, data.file) || p.basename(data.file));\n    // ^ the result is cast to a string as meta.desc MAY be a number of other implicit type originating from\n    //   the YAML parser, e.g. `desc: 123` in your YAML would produce a *number* rather than a *string*.\n    options.assert.strictEqual(typeof desc, 'string', 'every test series is expected to come with a decent title');\n    options.assert(desc.length > 0, 'every test series is expected to come with a decent *non-empty* title');\n\n    (data.meta.skip ? describe.skip : describe)(desc, function () {\n      data.fixtures.forEach(function (fixture) {\n        const testTitle = fixture.header && options.header ? fixture.header : 'line ' + (fixture.first.range[0] - 1);\n        if (options.test) {\n          options.test(it, testTitle, fixture, options, md, Object.assign({}, env));\n        } else {\n          it(testTitle, function () {\n            options.assert.strictEqual(md.render(fixture.first.text, Object.assign({}, env)), fixture.second.text);\n          });\n        }\n      });\n    });\n  });\n}\n\nmodule.exports = generate;\nmodule.exports.load = load;\n"],"names":["fs","require","p","yaml","_class","obj","Object","prototype","toString","call","isString","isFunction","isArray","fixLF","str","length","parse","input","options","lines","split","max","min","line","fixture","i","l","currentSep","blockStart","result","fixtures","sep","test","meta","slice","join","indexOf","type","header","first","text","range","second","push","Math","trim","load","path","iterator","parsed","stat","statSync","isFile","readFileSync","file","src","ex","console","error","res","isDirectory","readdirSync","forEach","name","Array","concat","generate","md","env","render","assign","assert","data","desc","relative","basename","strictEqual","skip","describe","testTitle","it","module","exports"],"mappings":"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"}